{
  "gitLessons": [
    {
      "LessonTitle": "Introduction to Git",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "What is Git and why is it used",
          "Example": "",
          "Explanation": "Git is a distributed version control system used to manage and track changes to source code. It helps developers collaborate on projects and maintain a history of all changes made to the code."
        },
        {
          "StepNumber": 2,
          "Description": "Setting up Git on your computer",
          "Example": "git config --global user.name 'John Doe'\ngit config --global user.email 'johndoe@example.com'",
          "Explanation": "To use Git, you first need to configure it on your computer by setting your username and email address. This information will be attached to every commit you make in Git."
        },
        {
          "StepNumber": 3,
          "Description": "Creating a new Git repository",
          "Example": "git init my-new-project",
          "Explanation": "To start using Git for a new project, you need to create a new Git repository. You can do this by running the `git init` command followed by the name of your project."
        }
      ]
    },
    {
      "LessonTitle": "Git Basics",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "What is Git and why is it used",
          "Example": "",
          "Explanation": "Git is a distributed version control system used to manage and track changes to source code. It helps developers collaborate on projects and maintain a history of all changes made to the code."
        },
        {
          "StepNumber": 2,
          "Description": "Setting up Git on your computer",
          "Example": "git config --global user.name 'John Doe'\ngit config --global user.email 'johndoe@example.com'",
          "Explanation": "To use Git, you first need to configure it on your computer by setting your username and email address. This information will be attached to every commit you make in Git."
        },
        {
          "StepNumber": 3,
          "Description": "Creating a new Git repository",
          "Example": "git init my-new-project",
          "Explanation": "To start using Git for a new project, you need to create a new Git repository. You can do this by running the `git init` command followed by the name of your project."
        },
        {
          "StepNumber": 4,
          "Description": "Adding files to the Git repository",
          "Example": "git add file1.txt file2.txt\ngit commit -m 'Initial commit'",
          "Explanation": "To add files to a Git repository, you first need to run the `git add` command followed by the names of the files you want to add. You can then commit the changes to the repository by running the `git commit` command followed by a commit message, e.g. `git commit -m 'Initial commit'`."
        },
        {
          "StepNumber": 5,
          "Description": "Viewing the Git log",
          "Example": "git log",
          "Explanation": "To view the history of commits in a Git repository, use the `git log` command. This will display a list of all the commits made to the repository along with their authors, dates, and commit messages."
        }
      ]
    },
    {
      "LessonTitle": "Git Branching Basics",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "What is a Git Branch",
          "Example": "",
          "Explanation": "A branch in Git is a separate line of development within a repository. Branches allow multiple developers to work on different parts of a project simultaneously without affecting the main branch."
        },
        {
          "StepNumber": 2,
          "Description": "Creating a Branch",
          "Example": "git branch new-feature\ngit checkout new-feature",
          "Explanation": "To create a new branch, use the `git branch` command followed by the name of the branch you want to create. For example, `git branch new-feature`. To switch to the new branch, use the `git checkout` command followed by the name of the branch, e.g. `git checkout new-feature`."
        },
        {
          "StepNumber": 3,
          "Description": "Merging Branches",
          "Example": "git checkout main-branch\ngit merge new-feature",
          "Explanation": "To merge changes from one branch into another, first checkout the branch you want to merge into and then use the `git merge` command followed by the name of the branch you want to merge. For example, `git checkout main-branch` followed by `git merge new-feature`. This will bring in the changes from the `new-feature` branch into the `main-branch`."
        },
        {
          "StepNumber": 4,
          "Description": "Deleting a Branch",
          "Example": "git branch -d new-feature",
          "Explanation": "To delete a branch, use the `git branch` command followed by the `-d` option and the name of the branch. For example, `git branch -d new-feature`. Make sure you have merged all the changes from the branch you want to delete before running this command."
        }
      ]
    },
    {
      "LessonTitle": "Git Staging",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "What is Git Staging",
          "Example": "",
          "Explanation": "Git staging is the process of preparing a set of changes to be committed to the Git repository. It allows you to select only the changes you want to include in the next commit, rather than committing all changes made to the repository."
        },
        {
          "StepNumber": 2,
          "Description": "Adding changes to the Git Staging Area",
          "Example": "git add file1.txt file2.txt",
          "Explanation": "To add changes to the Git Staging Area, use the `git add` command followed by the names of the files you want to add. This will stage the changes, which means they will be included in the next commit."
        },
        {
          "StepNumber": 3,
          "Description": "Viewing Staged and Unstaged Changes",
          "Example": "git diff\ngit diff --staged",
          "Explanation": "To view the changes you have made to the Git repository, use the `git diff` command. To view only the staged changes, use the `git diff --staged` command. This will display a list of the changes that have been staged and are ready to be committed."
        },
        {
          "StepNumber": 4,
          "Description": "Removing Changes from the Staging Area",
          "Example": "git reset file1.txt",
          "Explanation": "To remove changes from the Git Staging Area, use the `git reset` command followed by the name of the file you want to remove. This will remove the changes from the Staging Area, but they will still exist in the working tree."
        },
        {
          "StepNumber": 5,
          "Description": "Committing Staged Changes",
          "Example": "git commit -m 'Commit message'",
          "Explanation": "To commit the changes in the Git Staging Area to the Git repository, use the `git commit` command followed by a commit message. This will create a new commit in the Git log with the changes you have staged."
        }
      ]
    },
    {
      "LessonTitle": "GitHub",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "What is GitHub",
          "Example": "",
          "Explanation": "GitHub is a web-based platform for version control and collaboration that uses Git. It provides a centralized repository for projects, making it easier for teams to collaborate on code and track changes."
        },
        {
          "StepNumber": 2,
          "Description": "Creating a GitHub Account",
          "Example": "",
          "Explanation": "To start using GitHub, you need to create a GitHub account by visiting the GitHub website and following the sign-up process. You will be asked to provide your username, email address, and password."
        },
        {
          "StepNumber": 3,
          "Description": "Creating a New GitHub Repository",
          "Example": "",
          "Explanation": "To create a new GitHub repository, log in to your GitHub account and click on the 'New repository' button. You will be asked to provide a repository name, description, and select the repository's visibility (public or private)."
        },
        {
          "StepNumber": 4,
          "Description": "Cloning a GitHub Repository",
          "Example": "git clone https://github.com/user/repo.git",
          "Explanation": "To clone a GitHub repository to your local machine, use the `git clone` command followed by the URL of the GitHub repository. This will download a copy of the repository to your computer, allowing you to work with the code locally."
        },
        {
          "StepNumber": 5,
          "Description": "Pushing Changes to a GitHub Repository",
          "Example": "git push origin branch-name",
          "Explanation": "To push changes to a GitHub repository, you need to have made the changes locally and committed them using Git. Then use the `git push` command followed by the name of the branch you want to push the changes to. This will upload the changes to the GitHub repository."
        }
      ]
    },
    {
      "LessonTitle": "Git to GitHub Workflow using Terminal",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Creating a new Git repository locally",
          "Example": "git init my-new-project",
          "Explanation": "To start using Git for a new project, you need to create a new Git repository. You can do this by navigating to your project's directory in the terminal and running the `git init` command."
        },
        {
          "StepNumber": 2,
          "Description": "Adding files to the Git repository",
          "Example": "git add .\ngit commit -m 'Initial commit'",
          "Explanation": "To add files to the Git repository, use the `git add` command followed by the file names or `.` to add all files in the directory. Then use the `git commit` command to create a new commit with a message describing the changes you've made."
        },
        {
          "StepNumber": 3,
          "Description": "Creating a new GitHub repository",
          "Example": "",
          "Explanation": "To create a new GitHub repository, log in to your GitHub account and click on the 'New repository' button. You will be asked to provide a repository name, description, and select the repository's visibility (public or private)."
        },
        {
          "StepNumber": 4,
          "Description": "Adding the GitHub repository as a remote",
          "Example": "git remote add origin https://github.com/user/repo.git",
          "Explanation": "To link the local Git repository with the GitHub repository, you need to add the GitHub repository as a remote in Git. You can do this using the `git remote add` command followed by the name you want to give the remote (typically `origin`) and the URL of the GitHub repository."
        },
        {
          "StepNumber": 5,
          "Description": "Pushing the changes to the GitHub repository",
          "Example": "git push -u origin master",
          "Explanation": "To push the changes in the local Git repository to the GitHub repository, use the `git push` command followed by the name of the remote (`origin`) and the branch you want to push the changes to (`master`). The `-u` option sets the remote and branch as the default for future `git push` commands."
        }
      ]
    }
  ]
}